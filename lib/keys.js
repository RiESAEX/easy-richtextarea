"use strict";
var _easy = require("easy");
var SHIFT_KEY = "Shift";
var CONTROL_KEY = "Control";
var shiftKeyDown = false, controlKeyDown = false;
_easy.document.onKeyUp(keyUpHandler);
_easy.document.onKeyDown(keyDownHandler);
var callback = function(event, element) {
    event.preventDefault();
}, capturedKeys = [
    SHIFT_KEY,
    CONTROL_KEY,
    "s"
];
function keyUpHandler(event, element) {
    var key = event.key;
    switch(key){
        case SHIFT_KEY:
            shiftKeyDown = false;
            break;
        case CONTROL_KEY:
            controlKeyDown = false;
            break;
    }
}
function keyDownHandler(event, element) {
    var key = event.key;
    switch(key){
        case SHIFT_KEY:
            shiftKeyDown = true;
            break;
        case CONTROL_KEY:
            controlKeyDown = true;
            break;
        default:
            {
                var lowerCaseKey = key.toLowerCase(), captured1 = capturedKeys.every(function(capturedKey) {
                    var captured = false;
                    switch(capturedKey){
                        case SHIFT_KEY:
                            if (shiftKeyDown) {
                                captured = true;
                            }
                            break;
                        case CONTROL_KEY:
                            if (controlKeyDown) {
                                captured = true;
                            }
                            break;
                        default:
                            {
                                var lowerCaseCapturedKey = capturedKey.toLowerCase();
                                if (lowerCaseCapturedKey === lowerCaseKey) {
                                    captured = true;
                                }
                            }
                    }
                    return captured;
                });
                if (captured1) {
                    callback(event, element);
                }
            }
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9rZXlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBkb2N1bWVudCB9IGZyb20gXCJlYXN5XCI7XG5cbmNvbnN0IFNISUZUX0tFWSA9IFwiU2hpZnRcIjtcbmNvbnN0IENPTlRST0xfS0VZID0gXCJDb250cm9sXCI7XG5cbmxldCBzaGlmdEtleURvd24gPSBmYWxzZSxcbiAgICBjb250cm9sS2V5RG93biA9IGZhbHNlO1xuXG5kb2N1bWVudC5vbktleVVwKGtleVVwSGFuZGxlcik7XG5cbmRvY3VtZW50Lm9uS2V5RG93bihrZXlEb3duSGFuZGxlcik7XG5cbmNvbnN0IGNhbGxiYWNrID0gKGV2ZW50LCBlbGVtZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LFxuICAgICAgY2FwdHVyZWRLZXlzID0gWyBTSElGVF9LRVksIENPTlRST0xfS0VZLCBcInNcIiBdO1xuXG5mdW5jdGlvbiBrZXlVcEhhbmRsZXIoZXZlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgeyBrZXkgfSA9IGV2ZW50O1xuXG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSBTSElGVF9LRVk6XG4gICAgICBzaGlmdEtleURvd24gPSBmYWxzZTtcblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIENPTlRST0xfS0VZOlxuICAgICAgY29udHJvbEtleURvd24gPSBmYWxzZTtcblxuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24ga2V5RG93bkhhbmRsZXIoZXZlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgeyBrZXkgfSA9IGV2ZW50O1xuXG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSBTSElGVF9LRVk6XG4gICAgICBzaGlmdEtleURvd24gPSB0cnVlO1xuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgQ09OVFJPTF9LRVk6XG4gICAgICBjb250cm9sS2V5RG93biA9IHRydWU7XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc3QgbG93ZXJDYXNlS2V5ID0ga2V5LnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBjYXB0dXJlZCA9IGNhcHR1cmVkS2V5cy5ldmVyeSgoY2FwdHVyZWRLZXkpID0+IHtcbiAgICAgICAgICAgICAgbGV0IGNhcHR1cmVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgc3dpdGNoIChjYXB0dXJlZEtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgU0hJRlRfS0VZOlxuICAgICAgICAgICAgICAgICAgaWYgKHNoaWZ0S2V5RG93bikge1xuICAgICAgICAgICAgICAgICAgICBjYXB0dXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBDT05UUk9MX0tFWTpcbiAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sS2V5RG93bikge1xuICAgICAgICAgICAgICAgICAgICBjYXB0dXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgY29uc3QgbG93ZXJDYXNlQ2FwdHVyZWRLZXkgPSBjYXB0dXJlZEtleS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAobG93ZXJDYXNlQ2FwdHVyZWRLZXkgPT09IGxvd2VyQ2FzZUtleSkge1xuICAgICAgICAgICAgICAgICAgICBjYXB0dXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGNhcHR1cmVkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgIGlmIChjYXB0dXJlZCkge1xuICAgICAgICBjYWxsYmFjayhldmVudCwgZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiU0hJRlRfS0VZIiwiQ09OVFJPTF9LRVkiLCJzaGlmdEtleURvd24iLCJjb250cm9sS2V5RG93biIsImRvY3VtZW50Iiwib25LZXlVcCIsImtleVVwSGFuZGxlciIsIm9uS2V5RG93biIsImtleURvd25IYW5kbGVyIiwiY2FsbGJhY2siLCJlbGVtZW50IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImNhcHR1cmVkS2V5cyIsImtleSIsImxvd2VyQ2FzZUtleSIsInRvTG93ZXJDYXNlIiwiY2FwdHVyZWQiLCJldmVyeSIsImNhcHR1cmVkS2V5IiwibG93ZXJDYXNlQ2FwdHVyZWRLZXkiXSwibWFwcGluZ3MiOiJBQUFBLENBQVksV0FBQSxDQUFDO0FBRVksR0FBTSxDQUFOLEtBQU07QUFFL0IsR0FBSyxDQUFDQSxTQUFTLEdBQUcsQ0FBTztBQUN6QixHQUFLLENBQUNDLFdBQVcsR0FBRyxDQUFTO0FBRTdCLEdBQUcsQ0FBQ0MsWUFBWSxHQUFHLEtBQUssRUFDcEJDLGNBQWMsR0FBRyxLQUFLO0FBRTFCQyxLQUFRLFVBQUNDLE9BQU8sQ0FBQ0MsWUFBWSxDQUFDLENBQUM7QUFFL0JGLEtBQVEsVUFBQ0csU0FBUyxDQUFDQyxjQUFjLENBQUMsQ0FBQztBQUVuQyxHQUFLLENBQUNDLFFBQVEsR0FBRyxRQUFRQyxDQUFQQyxLQUFLLEVBQUVELE9BQU8sRUFBSyxDQUFDO0lBQzlCQyxLQUFLLENBQUNDLGNBQWMsRUFBRSxDQUFDO0FBQ3pCLENBQUMsRUFDREMsWUFBWSxHQUFHLENBQUM7SUFBQ2IsU0FBUztJQUFFQyxXQUFXO0lBQUUsQ0FBRztBQUFDLENBQUM7U0FFM0NLLFlBQVksQ0FBQ0ssS0FBSyxFQUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNyQyxHQUFLLENBQUdJLEdBQUcsR0FBS0gsS0FBSyxDQUFiRyxHQUFHO0lBRVgsTUFBTSxDQUFFQSxHQUFHO1FBQ1QsSUFBSSxDQUFDZCxTQUFTO1lBQ1pFLFlBQVksR0FBRyxLQUFLLENBQUM7WUFFckIsS0FBSztRQUVQLElBQUksQ0FBQ0QsV0FBVztZQUNkRSxjQUFjLEdBQUcsS0FBSyxDQUFDO1lBRXZCLEtBQUs7O0FBRVgsQ0FBQztTQUVRSyxjQUFjLENBQUNHLEtBQUssRUFBRUQsT0FBTyxFQUFFLENBQUM7SUFDdkMsR0FBSyxDQUFHSSxHQUFHLEdBQUtILEtBQUssQ0FBYkcsR0FBRztJQUVYLE1BQU0sQ0FBRUEsR0FBRztRQUNULElBQUksQ0FBQ2QsU0FBUztZQUNaRSxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBRXBCLEtBQUs7UUFFUCxJQUFJLENBQUNELFdBQVc7WUFDZEUsY0FBYyxHQUFHLElBQUksQ0FBQztZQUV0QixLQUFLOztZQUVFLENBQUM7Z0JBQ1IsR0FBSyxDQUFDWSxZQUFZLEdBQUdELEdBQUcsQ0FBQ0UsV0FBVyxJQUM5QkMsU0FBUSxHQUFHSixZQUFZLENBQUNLLEtBQUssQ0FBQyxRQUFRLENBQVBDLFdBQVcsRUFBSyxDQUFDO29CQUM5QyxHQUFHLENBQUNGLFFBQVEsR0FBRyxLQUFLO29CQUVwQixNQUFNLENBQUVFLFdBQVc7d0JBQ2pCLElBQUksQ0FBQ25CLFNBQVM7NEJBQ1osRUFBRSxFQUFFRSxZQUFZLEVBQUUsQ0FBQztnQ0FDakJlLFFBQVEsR0FBRyxJQUFJLENBQUM7NEJBQ2xCLENBQUM7NEJBRUQsS0FBSzt3QkFFUCxJQUFJLENBQUNoQixXQUFXOzRCQUNkLEVBQUUsRUFBRUUsY0FBYyxFQUFFLENBQUM7Z0NBQ25CYyxRQUFRLEdBQUcsSUFBSSxDQUFDOzRCQUNsQixDQUFDOzRCQUVELEtBQUs7OzRCQUVFLENBQUM7Z0NBQ1IsR0FBSyxDQUFDRyxvQkFBb0IsR0FBR0QsV0FBVyxDQUFDSCxXQUFXO2dDQUVwRCxFQUFFLEVBQUVJLG9CQUFvQixLQUFLTCxZQUFZLEVBQUUsQ0FBQztvQ0FDMUNFLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0NBQ2xCLENBQUM7NEJBQ0gsQ0FBQzs7b0JBR0gsTUFBTSxDQUFDQSxRQUFRO2dCQUNqQixDQUFDO2dCQUVQLEVBQUUsRUFBRUEsU0FBUSxFQUFFLENBQUM7b0JBQ2JSLFFBQVEsQ0FBQ0UsS0FBSyxFQUFFRCxPQUFPLENBQUMsQ0FBQztnQkFDM0IsQ0FBQztZQUNILENBQUM7O0FBRUwsQ0FBQyJ9